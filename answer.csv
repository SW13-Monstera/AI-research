data_id,problem_id,assign,keyword_content,sim_content,problem,user_answer,reference,score
4,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,쿠키는 클라이언트 로컬에 저장되기 때문에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해서 sessionid만 저장하고 그것으로 구분해서 서버에서 처리하기 때문에 보안성이 좋습니다. , https://interconnection.tistory.com/74,
5,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키도 만료시간이 있지만 파일로 저장되기 때문에 브라우저를 종료해도 계속해서 정보가 남아 있을 수 있습니다. 또한 만료기간을 넉넉하게 잡아두면 쿠키삭제를 할 때 까지 유지될 수도 있습니다. 반면에 세션도 만료시간을 정할 수 있지만 브라우저가 종료되면 만료시간에 상관없이 삭제됩니다. 예를 들어, 크롬에서 다른 탭을 사용해도 세션을 공유됩니다. 다른 브라우저를 사용하게 되면 다른 세션을 사용할 수 있습니다. ",https://interconnection.tistory.com/74,
6,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키에 정보가 있기 때문에 서버에 요청시 속도가 빠르고 세션은 정보가 서버에 있기 때문에 처리가 요구되어 비교적 느린 속도를 가집니다. 
",https://interconnection.tistory.com/74,
7,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,쿠키는 클라이언트의 웹 브라우저가 지정하는 메모리 또는 하드디스크에 저장하고 세션은 서버의 메모리에 저장합니다. 저장할 때 쿠키는 text형식으로 저장하고 세션은 Object 형식으로 저장합니다. ,https://devuna.tistory.com/23,
8,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,쿠키는 클라이언트에 저장되고 클라이언트의 메모리를 사용하기 때문에 서버의 자원을 사용하지 않는다. 하지만 세션은 서버에 저장되고 서버의 메모리로 로딩이 되기 때문에 세션이 생길때마다 서버의 리소스를 차지한다. ,https://devuna.tistory.com/23,
9,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키는 저장할 때 expires 속성을 정의해 무효화 시키면 삭제될 날짜를 지정할 수 있다. (따로 지정되지 않은 경우에는 브라우저 종료시 만료) 반면에 세션은 클라이언트가 로그아웃하거나, 설정한 시간동안 반응이 없을경우 무효화 되기 때문에 정확한 시점을 알 수 없다. ",https://devuna.tistory.com/23,
10,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키는 자동완성이나, 팝업 일주일간 보지 않기 등 사용자의 편의를 위하는 것이지만  지워져도 되고, 조작되거나 가로채이더라도 큰 지장이 없는 수준의 정보들을 저장하는데 사용됩니다. 그리고 사용자나 다른 누군가에게 노출되면 안되는 중요한 정보들은 세션으로 서버안에서 다뤄집니다. 쿠키로 노출시켜서는 안될 정보들이 있고, 세션을 남발하면 서버에 부담이 되어 과부하가 일어나기 때문에 웹을 설계할 때는 이 정보는 쿠키에 저장할 지 세션에 저장할 지 적절한 판단을 내릴 수 있어야 합니다.",https://devuna.tistory.com/23,
11,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,쿠키는 클라이언트 로컬에 저장되는 Key-Value쌍의 작은 데이터 파일입니다. 그리고 세션은 브라우저가 종료되기 전까지 클라이언트의 요청을 유지하게 해주는 기술입니다.,https://chrisjune-13837.medium.com/web-%EC%BF%A0%ED%82%A4-%EC%84%B8%EC%85%98%EC%9D%B4%EB%9E%80-aa6bcb327582,
12,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키와 세션의 차이점은 저장위치, 보안, Lifecycle, 속도 총 4가지 입니다. 쿠키는 로컬에, 세션은 로컬과 서버에 저장됩니다. 쿠키는 탈취와 변조가 가능하지만, 세션은 ID값만 가지고 있고 서버에도 저장이 되어있기 때문에 상대적으로 안전합니다. 쿠키는 브라우저를 종료해도 파일로 남아있지만, 세션은 브라우저 종료시 세션을 삭제합니다. 쿠키는 파일에서 읽기 때문에 상대적으로 빠르고, 세션은 요청마다 서버에서 처리를 해야하기 때문에 비교적 느립니다. ",https://chrisjune-13837.medium.com/web-%EC%BF%A0%ED%82%A4-%EC%84%B8%EC%85%98%EC%9D%B4%EB%9E%80-aa6bcb327582,
13,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키는 클라이언트, 세션 정보는 서버 측에 저장됩니다.",https://junhyunny.github.io/information/cookie-and-session/,
14,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,세션은 웹 서버에 저장되고 쿠키는 클라이언트(접속자 PC)에 저장된다. 세션은 Object로 저장되고 쿠키는 Text형태로 저장된다. ,https://junhyunny.github.io/information/cookie-and-session/,
15,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키의 만료시점은 쿠키 저장시 설정하기 때문에 브라우저가 종료되도, 만료시점이 지나지 않으면 자동 삭제되지 않습니다. 그러나 세션은 브라우저 종료시 삭제된다. 그리고 보안의 측면에서 세션은 서버가 관리하기 때문에 보안성이 쿠키보다 좋다. 쿠키는 클라이언트가 관리하기 때문에 해킹에 취약하다. ",https://junhyunny.github.io/information/cookie-and-session/,
16,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"가장 큰 차이점은 사용자의 정보가 저장되는 위치입니다. 때문에 쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용합니다. 쿠키는 클라이언트 로컬에 저장되기 때문에 변질되거나 request에서 스니핑 당할 우려가 있어서 보안에 취약하지만 세션은 쿠키를 이용해서 sessionid만 저장하고 그것으로 구분해서 서버에서 처리하기 때문에 비교적 보안성이 좋습니다. ",https://junhyunny.github.io/information/cookie-and-session/,
17,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"가장 큰 차이점은 사용자의 정보가 저장되는 위치입니다. 때문에 쿠키는 서버의 자원을 전혀 사용하지 않으며, 세션은 서버의 자원을 사용합니다. 보안 면에서 세션이 더 우수하며, 요청 속도는 쿠키가 세션보다 더 빠릅니다.  ",https://junhyunny.github.io/information/cookie-and-session/,
18,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키는 클라이언트(브라우저)에 메모리 또는 파일에 저장하고, 세션은 서버 메모리에 저장된다. 쿠키는 파일로 저장되는 경우 탈취, 변조될 위험이 있고, Request/Response에서 스나이핑 당할 위험이 있어 보안이 비교적 취약하다. 반대로 Session은 클라이언트 정보 자체가 서버에 저장되어 있으므로 비교적 안전하다. ",https://jeong-pro.tistory.com/80,
19,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키는 지속 쿠키의 경우에 브라우저를 종료하더라도 저장되어 있을 수 있는 반면에 세션은 서버에서 만료시간 / 날짜를 정해서 지워버릴 수 있기도 하고 세션 쿠키에 세션 아이디를 정한 경우, 브라우저 종료시 세션아이디가 날아갈 수 있다. ",https://jeong-pro.tistory.com/80,
20,mstr_nw_1,jack,"저장위치 - 2점, 보안 - 1점, Lifecycle - 1점, 속도 - 1점","저장위치가 쿠키는 클라이언트측이고, 세션은 웹서버라는 내용 - 2점, 세션이 쿠키보다 속도가 느리다는 내용 - 1점, 세션이 쿠키보다 보안에 유리하다는 내용 - 1점, Lifecycle에 대한 내용 - 1점",[네트워크 1] 쿠키와 세션의 차이점을 설명해주세요.,"쿠키에 정보가 있기 때문에 서버에 요청시 헤더를 바로 참조하면 되므로 속도에서 유리하지만, 세션은 제공받은 세션아이디(Key)를 이용해서 서버에 다시 데이터를 참조해야하므로 속도가 비교적 느릴 수 있다. ",https://jeong-pro.tistory.com/80,
21,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등성이란 수학에서 사용하는 용어에서 유래한 것으로, 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질을 뜻합니다.
",https://velog.io/@dion/HTTP-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1-%EA%B7%B8%EA%B2%8C-%EB%AD%94%EB%8D%B0,
22,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"서버의 상태는 멱등성이 유지되어야 하는 경우 같은 행위를 여러 번 반복하더라도 같은 효과를 가져야 합니다.
",https://velog.io/@dion/HTTP-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1-%EA%B7%B8%EA%B2%8C-%EB%AD%94%EB%8D%B0,
23,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등한 메서드는 서버의 상태를 변경시킬 수도 있고, 시키지 않을 수도 있습니다. 다만 요청한 사항은 에러가 나거나, 지연이 발생하지 않는 한 요청에 대한 서버의 상태는 항상 같습니다.",:https://velog.io/@dion/HTTP-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1-%EA%B7%B8%EA%B2%8C-%EB%AD%94%EB%8D%B0,
24,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"동일한 요청을 한번 보내는 것과 여러번 연속으로 보내는 것이 같은 효과를 가지고, 서버의 상태도 동일하게 남을 때 해당 HTTP Method가 멱등성을 가진다고 한다.",https://velog.io/@gidskql6671/HTTP-Method%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1,
25,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,HTTP Method의 멱등성은 요청을 한번 보내는 것과 여러번 연속으로 보내는 것이 같은 효과를 가지는 것 이다. 같은 요청을 했을 때 응답하는 상태코드가 바뀌더라도 서버의 상태가 항상 같은 상태라면 멱등성이 있다고 판단한다.,https://velog.io/@gidskql6671/HTTP-Method%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1,
26,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"우리가 흔히 사용하는 HTTP Method는 GET, POST, PUT, PATCH, DELETE가 있다. HTTP 스펙에 명시된 것에 의하면 GET, PUT, DELETE는 멱등성을 가지도록, POST와 PATCH는 멱등성을 가지지 않도록 구현해야 한다. ",https://velog.io/@gidskql6671/HTTP-Method%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1,
27,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,HTTP 메서드의 멱등성은 여러번 요청을 보내더라도 서버의 상태가 변하지 않는 것을 말한다. 검정색 물감통에 붓을 찍으면 항상 검정 물감이 찍혀 나오는 것과 같다. HTTP 메서드의 멱등성은 단지 규약일 뿐이라서 꼭 지켜야 하는건 아니지만 규약들을 제대로 지키지 않으면 원치 않는 동작을 야기할 가능성이 크기 때문에 가능한 규약을 지켜 그에 맞는 동작을 하도록 구현하는게 좋다.,https://velog.io/@gidskql6671/HTTP-Method%EC%9D%98-%EB%A9%B1%EB%93%B1%EC%84%B1,
28,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니고, 서버의 상태도 동일하게 남을 때, 해당 HTTP 메서드가 멱등성을 가졌다고 말합니다. 다른 말로는, 멱등성 메서드에는 통계 기록 등을 제외하면 어떠한 부수 효과(side effect)도 존재해서는 안됩니다. 올바르게 구현한 경우 GET, HEAD, PUT, DELETE 메서드는 멱등성을 가지며 POST 메서드는 그렇지 않습니다. 모든 안전한 메서드는 멱등성도 가집니다.", https://developer.mozilla.org/ko/docs/Glossary/Idempotent,
29,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등성은 동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니고 서버의 상태도 동일하게 남는 것 입니다. 멱등성을 따질 땐 실제 서버의 백엔드 상태만 보면 되며, 각 요청에서 반환하는 응답 코드는 다를 수 있습니다. 첫 번째 DELETE 요청이 200을 반환한다면 그 이후에는 아마 404를 반환할 것입니다. 하지만 두 번째 DELETE 요청에서 200이 또 반환된다면 그건 멱등성 규율을 위반한 예시입니다.",https://developer.mozilla.org/ko/docs/Glossary/Idempotent,
30,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등성이란 특정 메서드의 요청을 여러번 하더라도 한번 요청했을 때와 결과가 같다면 멱등하다라고고 한다. PUT, DELETE, TRACE 및 GET, HEAD, OPTIONS가 멱등성을 갖는다.",https://sangwoo0727.github.io/network/Network-1_HttpMethod/#%EB%A9%B1%EB%93%B1%EC%84%B1-idempotent,
31,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등법칙또는 멱등성은 수학이나 전산학에서 연산의 한 성질을 나타내는 것으로, 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질을 의미한다. 정리하자면 특정 HTTP 메서드를 여러 번 요청을 했을 경우, 매번 요청 결과가 같다면 해당 메소드를 멱등성 메서드라고 한다.",https://atoz-developer.tistory.com/117,
32,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등성은 어떠한 값에 대해 여러번 동일한 연산을 수행하였을 때, 호출 횟수에 구애받지 않고 동일한 결과값을 내어주는 성질이라고 이해하면 될 것 같다.",https://hudi.blog/http-method-idempotent/,
33,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"동일한 요청을 한번 보내는 것과, 여러번 보내는 것이 서로 동일한 효과를 지니고, 서버의 상태도 동일하게 남을 때 해당 HTTP Method가 멱등성을 갖는다고 이야기한다. 멱등성을 따질 때에는 서버의 상태만 바라보면 되며, HTTP 응답 Status는 신경쓰지 않아도 된다. ",https://hudi.blog/http-method-idempotent/,
34,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,멱등성은 같은 행위를 여러번 수행해도 결과가 같다는 것을 의미한다. GET 요청 같은 경우 여러 번 호출해도 클라이언트는 동일한 응답을 받는다. 또한 POST는 여러 번 호출할 경우 여러 열이 추가된다.,https://lnk7424.tistory.com/7,
35,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니고, 서버의 상태도 동일하게 남을 때, 해당 HTTP 메서드가 멱등성을 가졌다고 말한다. 멱등성이 성립하는 메소드는 통계 기록을 제외하면 어떠한 side effect도 존재해서는 안된다. ",https://lnk7424.tistory.com/7,
36,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등성은 같은 행위를 여러번 수행해도 결과가 같다는 것을 의미한다. 멱등성을 따질 때에는 서버의 백엔드 상태만 보면 되며, 각 요청에서 반환하는 응답 코드는 다를 수 있다. ",https://lnk7424.tistory.com/7,
37,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"멱등성이란 어떤 대상에 같은 연산을 여러번 적용해도 결과가 달라지지 않는 성질이다. 예를 들어 어떠한 수에 1을 곱하는 x = x * 1과 같은 함수는 어떠한 값에 1번을 적용하던, 1000번을 적용하던 항상 x를 반환한다. 이런 연산을 멱등성이 보장된다고 한다.",https://lnk7424.tistory.com/7,
38,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"HTTP 메소드 또한 결국 어떤 자원을 쓰고 읽고 수정하고 지우는 CRUD의 의미를 가지기 때문에, 우리는 어떤 행위가 멱등성을 보장하고 어떤 행위가 멱등성을 보장하지 않는지 알고 있어야 어플리케이션이 예상하지 못한 방향으로 동작하는 것을 방지할 수 있다.
",https://lnk7424.tistory.com/7,
39,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,같은 연산을 여러번 반복하더라도 결과가 달라지지 않는 성질이 멱등성인데 HTTP 요청 같이 통신 회선상에서 일어나는 사건에서도 멱등성은 중요한 개념이다. 오류가 발생했을 경우 서버에서 멱등성을 보장하지 않는다면 재시도를 하지 않아야 한다.,https://shanta.tistory.com/7,
40,mstr_nw_2,jack,"stateless - 2점, 동일한 요청 - 2점, POST - 1점","서버가 상태를 갖지 않는다는 내용 - 2점, 같은 동작을 여러번 해도 결과가 바뀌지 않는다는 내용 - 2점, HTTP method 중에는 GET, PUT, DELETE 등이 있음, 혹은 멱등성이 아닌 메서드 POST, PUT에 대한 내용 - 1점",[네트워크 2] HTTP 메서드의 멱등성에 대해서 설명해주세요.,"연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질을 멱등성(idempotence)이라 한다. Rest api의 경우 get, head, put, delete 메소드는 멱등성을 가지고 있다. 그러나 post는 상태를 변화시키기 때문에 멱등성이 없다. (Status 변화를 준다.)",https://shanta.tistory.com/7,